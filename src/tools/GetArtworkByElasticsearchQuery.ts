import { z } from 'zod';
import { artworkSearchResponseSchema } from '../schemas/schemas';
import { BaseTool } from './BaseTool';

const artworkByElasticsearchQuerySchema = z.object({
  query: z.record(z.any()).describe(`The Elasticsearch query to execute from the 'artic-elasticsearch-query' tool.`),
  limit: z.number().optional().default(10).describe('The number of resources to return per page.'),
  page: z.number().optional().default(1).describe('The page of results to return. Used for pagination.'),
});

export class GetArtworkByElasticsearchQuery extends BaseTool<typeof artworkByElasticsearchQuerySchema, any> {
  public readonly name: string = 'get-artwork-by-elasticsearch-query';
  public readonly description: string = `Get artworks from the Art Institute of Chicago collection using an Elasticsearch query generated by the 'artic-elasticsearch-query' tool.`;
  public readonly inputSchema = artworkByElasticsearchQuerySchema;

  constructor() {
    super();
  }

  public async executeCore(input: z.infer<typeof this.inputSchema>) {
    const { query, limit, page } = input;
    console.error(`Executing Elasticsearch query:\n ${JSON.stringify(query)}`);
    const url = new URL(`${this.apiBaseUrl}/artworks/search`);
    url.searchParams.set('page', `${page}`);
    url.searchParams.set('limit', `${limit}`);

    const parsedData = await this.safeApiRequest(
      url,
      {
        method: 'POST',
        body: JSON.stringify(query),
      },
      artworkSearchResponseSchema,
    );
    // Attach pagination info to each artwork for formatting
    parsedData.data.forEach((artwork) => {
      (artwork as any)._pagination = parsedData.pagination;
    });
    return this.formatArtworkList(parsedData.data, `Elasticsearch query results`);
  }
}
